
//------------------------------------------------------------------------------

// <auto-generated>

//     This code was generated from a template.

//

//     Changes to this file may cause incorrect behavior and will be lost if

//     the code is regenerated.

// </auto-generated>

//------------------------------------------------------------------------------

 

using System;

using System.Collections;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.Collections.Specialized;




namespace KillSwitchEngage.Data

{

    
    public partial class Contact : System.ComponentModel.INotifyPropertyChanged
    
    {
    
          public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
          protected void RaisePropertyChanged(string propertyName)
    
          {
    
                if (PropertyChanged == null) return;
    
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    
          }
    
        #region Primitive Properties
    
     
    
        public virtual int ID
    
        {
    
    
            get { return _iD; }
    
            set {
    
                      _iD = value;
    
                      RaisePropertyChanged("ID");
    
                }
    
    
        }
    
    
        private int _iD;
    
    
     
    
        public virtual string Name
    
        {
    
    
            get { return _name; }
    
            set {
    
                      _name = value;
    
                      RaisePropertyChanged("Name");
    
                }
    
    
        }
    
    
        private string _name;
    
    
     
    
        public virtual string Address
    
        {
    
    
            get { return _address; }
    
            set {
    
                      _address = value;
    
                      RaisePropertyChanged("Address");
    
                }
    
    
        }
    
    
        private string _address;
    
    
     
    
        public virtual string City
    
        {
    
    
            get { return _city; }
    
            set {
    
                      _city = value;
    
                      RaisePropertyChanged("City");
    
                }
    
    
        }
    
    
        private string _city;
    
    
     
    
        public virtual Nullable<int> StateID
    
        {
    
    
            get { return _stateID; }
    
            set
    
            {
    
    
                try
    
                {
    
                    _settingFK = true;
    
        
                    if (_stateID != value)
        
        
                    {
        
        
                        if (State != null && State.ID != value)
        
        
                        {
        
        
                            State = null;
        
        
                        }
        
        
                        _stateID = value;
        
                                RaisePropertyChanged("StateID");     
        
                    }
        
    
                }
    
                finally
    
                {
    
                    _settingFK = false;
    
                }
    
    
            }
    
    
        }
    
    
        private Nullable<int> _stateID;
    
    
     
    
        public virtual string Zip
    
        {
    
    
            get { return _zip; }
    
            set {
    
                      _zip = value;
    
                      RaisePropertyChanged("Zip");
    
                }
    
    
        }
    
    
        private string _zip;
    

        #endregion
        #region Navigation Properties
    
     
    
    
        public virtual ICollection<CompanyContact> CompanyContacts
    
        {
    
            get
    
            {
    
                if (_companyContacts == null)
    
                {
    
    
                    var newCollection = new FixupCollection<CompanyContact>();
    
                    newCollection.CollectionChanged += FixupCompanyContacts;
    
                    _companyContacts = newCollection;
    
    
                }
    
                return _companyContacts;
    
            }
    
            set
    
            {
    
    
                if (!ReferenceEquals(_companyContacts, value))
    
                {
    
                    var previousValue = _companyContacts as FixupCollection<CompanyContact>;
    
                    if (previousValue != null)
    
                    {
    
                        previousValue.CollectionChanged -= FixupCompanyContacts;
    
                    }
    
                    _companyContacts = value;
    
                            RaisePropertyChanged("CompanyContacts");     
    
                    var newValue = value as FixupCollection<CompanyContact>;
    
                    if (newValue != null)
    
                    {
    
                        newValue.CollectionChanged += FixupCompanyContacts;
    
                    }
    
                }
    
    
            }
    
        }
    
        private ICollection<CompanyContact> _companyContacts;
    
    
     
    
    
        public virtual State State
    
        {
    
    
            get { return _state; }
    
            set
    
            {
    
                if (!ReferenceEquals(_state, value))
    
                {
    
                    var previousValue = _state;
    
                    _state = value;
    
                            RaisePropertyChanged("State");
    
                    FixupState(previousValue);
    
                }
    
            }
    
        }
    
        private State _state;
    

        #endregion
        #region Association Fixup
    
     
    
        private bool _settingFK = false;
    
    
     
    
        private void FixupState(State previousValue)
    
        {
    
    
            if (previousValue != null && previousValue.Contacts.Contains(this))
    
            {
    
                previousValue.Contacts.Remove(this);
    
            }
    
    
     
    
            if (State != null)
    
            {
    
                if (!State.Contacts.Contains(this))
    
                {
    
                    State.Contacts.Add(this);
    
                }
    
    
                if (StateID != State.ID)
    
    
                {
    
                    StateID = State.ID;
    
                }
    
    
            }
    
    
            else if (!_settingFK)
    
    
            {
    
    
                StateID = null;
    
    
            }
    
    
        }
    
    
     
    
        private void FixupCompanyContacts(object sender, NotifyCollectionChangedEventArgs e)
    
        {
    
            if (e.NewItems != null)
    
            {
    
                foreach (CompanyContact item in e.NewItems)
    
                {
    
    
                    item.Contact = this;
    
    
                }
    
            }
    
     
    
            if (e.OldItems != null)
    
            {
    
                foreach (CompanyContact item in e.OldItems)
    
                {
    
    
                    if (ReferenceEquals(item.Contact, this))
    
                    {
    
                        item.Contact = null;
    
                    }
    
    
                }
    
            }
    
        }
    

        #endregion
    
    }
    

}

