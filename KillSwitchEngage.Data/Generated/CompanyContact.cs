
//------------------------------------------------------------------------------

// <auto-generated>

//     This code was generated from a template.

//

//     Changes to this file may cause incorrect behavior and will be lost if

//     the code is regenerated.

// </auto-generated>

//------------------------------------------------------------------------------

 

using System;

using System.Collections;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.Collections.Specialized;




namespace KillSwitchEngage.Data

{

    
    public partial class CompanyContact : System.ComponentModel.INotifyPropertyChanged
    
    {
    
          public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
          protected void RaisePropertyChanged(string propertyName)
    
          {
    
                if (PropertyChanged == null) return;
    
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    
          }
    
        #region Primitive Properties
    
     
    
        public virtual int ID
    
        {
    
    
            get { return _iD; }
    
            set {
    
                      _iD = value;
    
                      RaisePropertyChanged("ID");
    
                }
    
    
        }
    
    
        private int _iD;
    
    
     
    
        public virtual int CompanyID
    
        {
    
    
            get { return _companyID; }
    
            set
    
            {
    
    
                if (_companyID != value)
    
    
                {
    
    
                    if (Company != null && Company.ID != value)
    
    
                    {
    
    
                        Company = null;
    
    
                    }
    
    
                    _companyID = value;
    
                            RaisePropertyChanged("CompanyID");     
    
                }
    
    
            }
    
    
        }
    
    
        private int _companyID;
    
    
     
    
        public virtual int ContactID
    
        {
    
    
            get { return _contactID; }
    
            set
    
            {
    
    
                if (_contactID != value)
    
    
                {
    
    
                    if (Contact != null && Contact.ID != value)
    
    
                    {
    
    
                        Contact = null;
    
    
                    }
    
    
                    _contactID = value;
    
                            RaisePropertyChanged("ContactID");     
    
                }
    
    
            }
    
    
        }
    
    
        private int _contactID;
    
    
     
    
        public virtual int ContactTypeID
    
        {
    
    
            get { return _contactTypeID; }
    
            set
    
            {
    
    
                if (_contactTypeID != value)
    
    
                {
    
    
                    if (ContactType != null && ContactType.ID != value)
    
    
                    {
    
    
                        ContactType = null;
    
    
                    }
    
    
                    _contactTypeID = value;
    
                            RaisePropertyChanged("ContactTypeID");     
    
                }
    
    
            }
    
    
        }
    
    
        private int _contactTypeID;
    

        #endregion
        #region Navigation Properties
    
     
    
    
        public virtual Company Company
    
        {
    
    
            get { return _company; }
    
            set
    
            {
    
                if (!ReferenceEquals(_company, value))
    
                {
    
                    var previousValue = _company;
    
                    _company = value;
    
                            RaisePropertyChanged("Company");
    
                    FixupCompany(previousValue);
    
                }
    
            }
    
        }
    
        private Company _company;
    
    
     
    
    
        public virtual Contact Contact
    
        {
    
    
            get { return _contact; }
    
            set
    
            {
    
                if (!ReferenceEquals(_contact, value))
    
                {
    
                    var previousValue = _contact;
    
                    _contact = value;
    
                            RaisePropertyChanged("Contact");
    
                    FixupContact(previousValue);
    
                }
    
            }
    
        }
    
        private Contact _contact;
    
    
     
    
    
        public virtual ContactType ContactType
    
        {
    
    
            get { return _contactType; }
    
            set
    
            {
    
                if (!ReferenceEquals(_contactType, value))
    
                {
    
                    var previousValue = _contactType;
    
                    _contactType = value;
    
                            RaisePropertyChanged("ContactType");
    
                    FixupContactType(previousValue);
    
                }
    
            }
    
        }
    
        private ContactType _contactType;
    

        #endregion
        #region Association Fixup
    
     
    
        private void FixupCompany(Company previousValue)
    
        {
    
    
            if (previousValue != null && previousValue.CompanyContacts.Contains(this))
    
            {
    
                previousValue.CompanyContacts.Remove(this);
    
            }
    
    
     
    
            if (Company != null)
    
            {
    
                if (!Company.CompanyContacts.Contains(this))
    
                {
    
                    Company.CompanyContacts.Add(this);
    
                }
    
    
                if (CompanyID != Company.ID)
    
    
                {
    
                    CompanyID = Company.ID;
    
                }
    
    
            }
    
    
        }
    
    
     
    
        private void FixupContact(Contact previousValue)
    
        {
    
    
            if (previousValue != null && previousValue.CompanyContacts.Contains(this))
    
            {
    
                previousValue.CompanyContacts.Remove(this);
    
            }
    
    
     
    
            if (Contact != null)
    
            {
    
                if (!Contact.CompanyContacts.Contains(this))
    
                {
    
                    Contact.CompanyContacts.Add(this);
    
                }
    
    
                if (ContactID != Contact.ID)
    
    
                {
    
                    ContactID = Contact.ID;
    
                }
    
    
            }
    
    
        }
    
    
     
    
        private void FixupContactType(ContactType previousValue)
    
        {
    
    
            if (previousValue != null && previousValue.CompanyContacts.Contains(this))
    
            {
    
                previousValue.CompanyContacts.Remove(this);
    
            }
    
    
     
    
            if (ContactType != null)
    
            {
    
                if (!ContactType.CompanyContacts.Contains(this))
    
                {
    
                    ContactType.CompanyContacts.Add(this);
    
                }
    
    
                if (ContactTypeID != ContactType.ID)
    
    
                {
    
                    ContactTypeID = ContactType.ID;
    
                }
    
    
            }
    
    
        }
    

        #endregion
    
    }
    

}

