
//------------------------------------------------------------------------------

// <auto-generated>

//     This code was generated from a template.

//

//     Changes to this file may cause incorrect behavior and will be lost if

//     the code is regenerated.

// </auto-generated>

//------------------------------------------------------------------------------

 

using System;

using System.Collections;

using System.Collections.Generic;

using System.Collections.ObjectModel;

using System.Collections.Specialized;




namespace KillSwitchEngage.Data

{

    
    public partial class State : System.ComponentModel.INotifyPropertyChanged
    
    {
    
          public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
          protected void RaisePropertyChanged(string propertyName)
    
          {
    
                if (PropertyChanged == null) return;
    
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
    
          }
    
        #region Primitive Properties
    
     
    
        public virtual int ID
    
        {
    
    
            get { return _iD; }
    
            set {
    
                      _iD = value;
    
                      RaisePropertyChanged("ID");
    
                }
    
    
        }
    
    
        private int _iD;
    
    
     
    
        public virtual string Code
    
        {
    
    
            get { return _code; }
    
            set {
    
                      _code = value;
    
                      RaisePropertyChanged("Code");
    
                }
    
    
        }
    
    
        private string _code;
    
    
     
    
        public virtual string Abbreviation
    
        {
    
    
            get { return _abbreviation; }
    
            set {
    
                      _abbreviation = value;
    
                      RaisePropertyChanged("Abbreviation");
    
                }
    
    
        }
    
    
        private string _abbreviation;
    
    
     
    
        public virtual string Name
    
        {
    
    
            get { return _name; }
    
            set {
    
                      _name = value;
    
                      RaisePropertyChanged("Name");
    
                }
    
    
        }
    
    
        private string _name;
    
    
     
    
        public virtual string Display
    
        {
    
    
            get { return _display; }
    
            set {
    
                      _display = value;
    
                      RaisePropertyChanged("Display");
    
                }
    
    
        }
    
    
        private string _display;
    

        #endregion
        #region Navigation Properties
    
     
    
    
        public virtual ICollection<Company> Companies
    
        {
    
            get
    
            {
    
                if (_companies == null)
    
                {
    
    
                    var newCollection = new FixupCollection<Company>();
    
                    newCollection.CollectionChanged += FixupCompanies;
    
                    _companies = newCollection;
    
    
                }
    
                return _companies;
    
            }
    
            set
    
            {
    
    
                if (!ReferenceEquals(_companies, value))
    
                {
    
                    var previousValue = _companies as FixupCollection<Company>;
    
                    if (previousValue != null)
    
                    {
    
                        previousValue.CollectionChanged -= FixupCompanies;
    
                    }
    
                    _companies = value;
    
                            RaisePropertyChanged("Companies");     
    
                    var newValue = value as FixupCollection<Company>;
    
                    if (newValue != null)
    
                    {
    
                        newValue.CollectionChanged += FixupCompanies;
    
                    }
    
                }
    
    
            }
    
        }
    
        private ICollection<Company> _companies;
    
    
     
    
    
        public virtual ICollection<Contact> Contacts
    
        {
    
            get
    
            {
    
                if (_contacts == null)
    
                {
    
    
                    var newCollection = new FixupCollection<Contact>();
    
                    newCollection.CollectionChanged += FixupContacts;
    
                    _contacts = newCollection;
    
    
                }
    
                return _contacts;
    
            }
    
            set
    
            {
    
    
                if (!ReferenceEquals(_contacts, value))
    
                {
    
                    var previousValue = _contacts as FixupCollection<Contact>;
    
                    if (previousValue != null)
    
                    {
    
                        previousValue.CollectionChanged -= FixupContacts;
    
                    }
    
                    _contacts = value;
    
                            RaisePropertyChanged("Contacts");     
    
                    var newValue = value as FixupCollection<Contact>;
    
                    if (newValue != null)
    
                    {
    
                        newValue.CollectionChanged += FixupContacts;
    
                    }
    
                }
    
    
            }
    
        }
    
        private ICollection<Contact> _contacts;
    

        #endregion
        #region Association Fixup
    
     
    
        private void FixupCompanies(object sender, NotifyCollectionChangedEventArgs e)
    
        {
    
            if (e.NewItems != null)
    
            {
    
                foreach (Company item in e.NewItems)
    
                {
    
    
                    item.State = this;
    
    
                }
    
            }
    
     
    
            if (e.OldItems != null)
    
            {
    
                foreach (Company item in e.OldItems)
    
                {
    
    
                    if (ReferenceEquals(item.State, this))
    
                    {
    
                        item.State = null;
    
                    }
    
    
                }
    
            }
    
        }
    
    
     
    
        private void FixupContacts(object sender, NotifyCollectionChangedEventArgs e)
    
        {
    
            if (e.NewItems != null)
    
            {
    
                foreach (Contact item in e.NewItems)
    
                {
    
    
                    item.State = this;
    
    
                }
    
            }
    
     
    
            if (e.OldItems != null)
    
            {
    
                foreach (Contact item in e.OldItems)
    
                {
    
    
                    if (ReferenceEquals(item.State, this))
    
                    {
    
                        item.State = null;
    
                    }
    
    
                }
    
            }
    
        }
    

        #endregion
    
    }
    

}

